Index: carddata/src/main/java/com/cardemory/carddata/Card.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/src/main/java/com/cardemory/carddata/Card.kt	(date 1552580976000)
+++ carddata/src/main/java/com/cardemory/carddata/Card.kt	(date 1552580976000)
@@ -0,0 +1,7 @@
+package com.cardemory.carddata
+
+data class Card(
+    val id: Long,
+    val title: String,
+    val description: String
+)
\ No newline at end of file
Index: carddata/src/main/java/com/cardemory/carddata/CardRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/src/main/java/com/cardemory/carddata/CardRepository.kt	(date 1552580976000)
+++ carddata/src/main/java/com/cardemory/carddata/CardRepository.kt	(date 1552580976000)
@@ -0,0 +1,6 @@
+package com.cardemory.carddata
+
+interface CardRepository {
+
+    suspend fun getAllCards(): List<Card>
+}
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/base\" />\n            <option value=\"$PROJECT_DIR$/cardlist\" />\n            <option value=\"$PROJECT_DIR$/exampleapp\" />\n          </set>\n        </option>\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ .idea/gradle.xml	(date 1552579841000)
@@ -10,8 +10,10 @@
             <option value="$PROJECT_DIR$" />
             <option value="$PROJECT_DIR$/app" />
             <option value="$PROJECT_DIR$/base" />
+            <option value="$PROJECT_DIR$/carddata" />
             <option value="$PROJECT_DIR$/cardlist" />
             <option value="$PROJECT_DIR$/exampleapp" />
+            <option value="$PROJECT_DIR$/infrastructure" />
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
Index: carddata/src/main/java/com/cardemory/carddata/CollectionCardRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/src/main/java/com/cardemory/carddata/CollectionCardRepository.kt	(date 1552581860000)
+++ carddata/src/main/java/com/cardemory/carddata/CollectionCardRepository.kt	(date 1552581860000)
@@ -0,0 +1,27 @@
+package com.cardemory.carddata
+
+import kotlinx.coroutines.delay
+
+class CollectionCardRepository : CardRepository {
+
+    private val cards = mutableListOf<Card>()
+
+    init {
+        repeat(10) { counter ->
+            Card(
+                counter.toLong(),
+                "Title: $counter",
+                "Description, can be long: $counter"
+            ).let { cards.add(it) }
+        }
+    }
+
+    override suspend fun getAllCards(): List<Card> {
+        delay(REPOSITORY_OPERATION_DELAY)
+        return cards
+    }
+
+    companion object {
+        private const val REPOSITORY_OPERATION_DELAY = 1000L
+    }
+}
\ No newline at end of file
Index: cardlist/src/main/java/com/cardemory/cardlist/CardListPresenter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cardemory.cardlist\n\nimport com.cardemory.common.mvp.BasePresenter\n\nclass CardListPresenter(private val navigation: CardListNavigation) :\n    BasePresenter<CardListContract.View>(),\n    CardListContract.Presenter {\n\n    override fun attachView(view: CardListContract.View) {\n        super.attachView(view)\n\n        navigation.showCreateCardScreen()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cardlist/src/main/java/com/cardemory/cardlist/CardListPresenter.kt	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ cardlist/src/main/java/com/cardemory/cardlist/CardListPresenter.kt	(date 1552588422000)
@@ -1,14 +1,23 @@
 package com.cardemory.cardlist
 
+import com.cardemory.carddata.CardRepository
 import com.cardemory.common.mvp.BasePresenter
+import kotlinx.coroutines.launch
 
-class CardListPresenter(private val navigation: CardListNavigation) :
-    BasePresenter<CardListContract.View>(),
+class CardListPresenter(
+    private val navigation: CardListNavigation,
+    private val cardRepository: CardRepository
+) : BasePresenter<CardListContract.View>(),
     CardListContract.Presenter {
 
     override fun attachView(view: CardListContract.View) {
         super.attachView(view)
 
         navigation.showCreateCardScreen()
+
+        launch {
+            val cards = cardRepository.getAllCards()
+
+        }
     }
 }
\ No newline at end of file
Index: carddata/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/build.gradle	(date 1552588227000)
+++ carddata/build.gradle	(date 1552588227000)
@@ -0,0 +1,31 @@
+apply from: '../versions.gradle'
+
+apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
+apply plugin: 'kotlin-android-extensions'
+
+android {
+    compileSdkVersion versions.android.compileSdk
+    defaultConfig {
+        minSdkVersion versions.android.minSdk
+        targetSdkVersion versions.android.targetSdk
+        versionCode versions.application.versionCode
+        versionName versions.application.versionName
+    }
+
+    buildTypes {
+        debug {
+            minifyEnabled false
+        }
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+
+}
+
+dependencies {
+
+    implementation project(":infrastructure")
+}
Index: cardlist/src/main/java/com/cardemory/cardlist/di/CardListFragmentModule.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cardemory.cardlist.di\n\nimport com.cardemory.cardlist.CardListContract\nimport com.cardemory.cardlist.CardListNavigation\nimport com.cardemory.cardlist.CardListPresenter\nimport com.cardemory.common.di.scope.FragmentScope\nimport dagger.Module\nimport dagger.Provides\n\n@Module\nclass CardListFragmentModule {\n\n    @FragmentScope\n    @Provides\n    fun providePresenter(\n        cardListNavigation: CardListNavigation\n    ): CardListContract.Presenter {\n        return CardListPresenter(cardListNavigation)\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cardlist/src/main/java/com/cardemory/cardlist/di/CardListFragmentModule.kt	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ cardlist/src/main/java/com/cardemory/cardlist/di/CardListFragmentModule.kt	(date 1552582962000)
@@ -1,5 +1,7 @@
 package com.cardemory.cardlist.di
 
+import com.cardemory.carddata.CardRepository
+import com.cardemory.carddata.CollectionCardRepository
 import com.cardemory.cardlist.CardListContract
 import com.cardemory.cardlist.CardListNavigation
 import com.cardemory.cardlist.CardListPresenter
@@ -13,8 +15,15 @@
     @FragmentScope
     @Provides
     fun providePresenter(
-        cardListNavigation: CardListNavigation
+        cardListNavigation: CardListNavigation,
+        cardRepository: CardRepository
     ): CardListContract.Presenter {
-        return CardListPresenter(cardListNavigation)
+        return CardListPresenter(cardListNavigation, cardRepository)
+    }
+
+    @FragmentScope
+    @Provides
+    fun provideCardRepository(): CardRepository {
+        return CollectionCardRepository()
     }
 }
\ No newline at end of file
Index: carddata/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/src/main/AndroidManifest.xml	(date 1552588422000)
+++ carddata/src/main/AndroidManifest.xml	(date 1552588422000)
@@ -0,0 +1,1 @@
+<manifest package="com.cardemory.carddata"/>
Index: carddata/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/proguard-rules.pro	(date 1552579757000)
+++ carddata/proguard-rules.pro	(date 1552579757000)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
Index: infrastructure/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/proguard-rules.pro	(date 1552579832000)
+++ infrastructure/proguard-rules.pro	(date 1552579832000)
@@ -0,0 +1,21 @@
+# Add project specific ProGuard rules here.
+# You can control the set of applied configuration files using the
+# proguardFiles setting in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
+
+# Uncomment this to preserve the line number information for
+# debugging stack traces.
+#-keepattributes SourceFile,LineNumberTable
+
+# If you keep the line number information, uncomment this to
+# hide the original source file name.
+#-renamesourcefileattribute SourceFile
Index: carddata/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/.gitignore	(date 1552579757000)
+++ carddata/.gitignore	(date 1552579757000)
@@ -0,0 +1,1 @@
+/build
Index: base/src/main/java/com/cardemory/common/domain/Failure.kt
===================================================================
--- base/src/main/java/com/cardemory/common/domain/Failure.kt	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ infrastructure/src/main/java/com/cardemory/infrastructure/entity/Failure.kt	(date 1552580208000)
@@ -1,4 +1,4 @@
-package com.cardemory.common.domain
+package com.cardemory.infrastructure.entity
 
 sealed class Failure(val cause: Throwable?) {
 
Index: infrastructure/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/.gitignore	(date 1552579832000)
+++ infrastructure/.gitignore	(date 1552579832000)
@@ -0,0 +1,1 @@
+/build
Index: infrastructure/src/main/java/com/cardemory/infrastructure/entity/Either.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/src/main/java/com/cardemory/infrastructure/entity/Either.kt	(date 1552588423000)
+++ infrastructure/src/main/java/com/cardemory/infrastructure/entity/Either.kt	(date 1552588423000)
@@ -0,0 +1,38 @@
+package com.cardemory.infrastructure.entity
+
+sealed class Either<out L, out R> {
+
+    /** * Represents the left side of [Either] class which by convention is a "Failure". */
+    data class Left<out L>(val valueLeft: L) : Either<L, Nothing>()
+
+    /** * Represents the right side of [Either] class which by convention is a "Success". */
+    data class Right<out R>(val valueRight: R) : Either<Nothing, R>()
+
+    val isRight get() = this is Right<R>
+
+    val isLeft get() = this is Left<L>
+
+    fun <L> left(a: L) = Left(a)
+
+    fun <R> right(b: R) = Right(b)
+
+    fun either(fnL: (L) -> Any, fnR: (R) -> Any): Any =
+        when (this) {
+            is Left -> fnL(valueLeft)
+            is Right -> fnR(valueRight)
+        }
+
+    fun <A, B, C> ((A) -> B).c(f: (B) -> C): (A) -> C = {
+        f(this(it))
+    }
+
+    fun <T, L, R> Either<L, R>.flatMap(fn: (R) -> Either<L, T>): Either<L, T> =
+        when (this) {
+            is Left -> Left(
+                valueLeft
+            )
+            is Right -> fn(valueRight)
+        }
+
+    fun <T, L, R> Either<L, R>.map(fn: (R) -> (T)): Either<L, T> = this.flatMap(fn.c(::right))
+}
\ No newline at end of file
Index: base/src/main/java/com/cardemory/common/mvp/BasePresenter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cardemory.common.mvp\n\nimport com.cardemory.common.domain.Failure\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.cancel\nimport timber.log.Timber\nimport kotlin.coroutines.CoroutineContext\n\nabstract class BasePresenter<V : BaseContract.View> :\n    BaseContract.Presenter<V>,\n    CoroutineScope {\n\n    override var coroutineContext: CoroutineContext = Dispatchers.Main\n\n    override var view: V? = null\n\n    override fun onError(error: Throwable) {\n        Timber.e(error)\n        view?.showError(error)\n    }\n\n    override fun handleFailure(failure: Failure) {\n        Timber.e(\"Error $failure\")\n    }\n\n    override fun attachView(view: V) {\n        this.view = view\n        this.coroutineContext += Job()\n    }\n\n    override fun detachView(finishing: Boolean) {\n        this.view = null\n        coroutineContext.cancel()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- base/src/main/java/com/cardemory/common/mvp/BasePresenter.kt	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ base/src/main/java/com/cardemory/common/mvp/BasePresenter.kt	(date 1552583534000)
@@ -1,6 +1,6 @@
 package com.cardemory.common.mvp
 
-import com.cardemory.common.domain.Failure
+import com.cardemory.infrastructure.entity.Failure
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.Job
Index: base/src/main/java/com/cardemory/common/mvp/BaseContract.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cardemory.common.mvp\n\nimport android.os.Bundle\nimport androidx.annotation.StringRes\n\nimport com.cardemory.common.domain.Failure\n\ninterface BaseContract {\n\n    interface View {\n\n        fun showError(error: Throwable)\n\n        fun onError(@StringRes messageId: Int)\n    }\n\n    interface Presenter<V : View> {\n\n        val view: V?\n\n        fun onError(error: Throwable)\n\n        fun handleFailure(failure: Failure)\n\n        fun attachView(view: V)\n\n        fun detachView(finishing: Boolean = true)\n\n        fun saveViewState(outState: Bundle) {}\n\n        fun restoreViewState(inState: Bundle) {}\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- base/src/main/java/com/cardemory/common/mvp/BaseContract.kt	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ base/src/main/java/com/cardemory/common/mvp/BaseContract.kt	(date 1552583534000)
@@ -3,7 +3,7 @@
 import android.os.Bundle
 import androidx.annotation.StringRes
 
-import com.cardemory.common.domain.Failure
+import com.cardemory.infrastructure.entity.Failure
 
 interface BaseContract {
 
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>include ':app', ':base', ':exampleapp', ':cardlist'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- settings.gradle	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ settings.gradle	(date 1552579832000)
@@ -1,1 +1,1 @@
-include ':app', ':base', ':exampleapp', ':cardlist'
+include ':app', ':base', ':exampleapp', ':cardlist', ':carddata', ':infrastructure'
Index: infrastructure/src/main/java/com/cardemory/infrastructure/BaseSingleInteractor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/src/main/java/com/cardemory/infrastructure/BaseSingleInteractor.kt	(date 1552580208000)
+++ infrastructure/src/main/java/com/cardemory/infrastructure/BaseSingleInteractor.kt	(date 1552580208000)
@@ -0,0 +1,31 @@
+package com.cardemory.infrastructure
+
+import com.cardemory.infrastructure.entity.Either
+import com.cardemory.infrastructure.entity.Failure
+import kotlinx.coroutines.*
+
+abstract class BaseSingleInteractor<out Type, in Params>
+    : BaseInteractor<Type, Params>() where Type : Any {
+
+    private lateinit var job: Deferred<Either<Failure, Type>>
+
+    operator fun invoke(params: Params, onResult: (Either<Failure, Type>) -> Unit = {}) {
+        job = GlobalScope.async(Dispatchers.Default) {
+            run(params)
+        }
+
+        GlobalScope.launch(Dispatchers.Main) {
+            onResult(job.await())
+        }
+    }
+
+    fun cancel() {
+        job.cancel()
+    }
+
+    fun isCanceled(): Boolean {
+        return ::job.isInitialized && job.isCancelled
+    }
+
+    abstract suspend fun run(params: Params): Either<Failure, Type>
+}
\ No newline at end of file
Index: infrastructure/src/main/java/com/cardemory/infrastructure/BasePublisherInteractor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/src/main/java/com/cardemory/infrastructure/BasePublisherInteractor.kt	(date 1552583534000)
+++ infrastructure/src/main/java/com/cardemory/infrastructure/BasePublisherInteractor.kt	(date 1552583534000)
@@ -0,0 +1,52 @@
+package com.cardemory.infrastructure
+
+import com.cardemory.infrastructure.entity.Either
+import com.cardemory.infrastructure.entity.Failure
+import kotlinx.coroutines.*
+import kotlinx.coroutines.channels.ReceiveChannel
+import kotlinx.coroutines.channels.consumeEach
+
+@ObsoleteCoroutinesApi
+abstract class BasePublisherInteractor<out Type, in Params>
+    : BaseInteractor<Type, Params>() where Type : Any {
+
+    private var job: Job? = null
+
+    operator fun invoke(
+        params: Params,
+        onResult: (Either<Failure, Type>) -> Unit = {},
+        onComplete: (failure: Failure?) -> Unit = {}
+    ) {
+        job = GlobalScope.launch(Dispatchers.Default) {
+            var failure: Failure? = null
+            try {
+                run(params).consumeEach {
+                    withContext(Dispatchers.Main) {
+                        onResult.invoke(it)
+                    }
+                    if (it is Either.Left) {
+                        failure = it.valueLeft
+                    }
+                }
+            } finally {
+                GlobalScope.launch(Dispatchers.Main) {
+                    onComplete.invoke(failure)
+                }
+            }
+        }
+    }
+
+    open fun cancel() {
+        job?.cancel()
+    }
+
+    fun isCanceled(): Boolean {
+        return job?.isCancelled ?: false
+    }
+
+    fun isActive(): Boolean {
+        return job?.isActive ?: false
+    }
+
+    abstract suspend fun run(params: Params): ReceiveChannel<Either<Failure, Type>>
+}
\ No newline at end of file
Index: cardlist/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply from: '../versions.gradle'\n\napply plugin: 'com.android.library'\napply plugin: 'kotlin-kapt'\napply plugin: 'kotlin-android'\n\nandroid {\n    compileSdkVersion versions.android.compileSdk\n    defaultConfig {\n        minSdkVersion versions.android.minSdk\n        targetSdkVersion versions.android.targetSdk\n        versionCode versions.application.versionCode\n        versionName versions.application.versionName\n    }\n\n    buildTypes {\n        debug {\n            minifyEnabled false\n        }\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n}\n\ndependencies {\n    kapt \"com.google.dagger:dagger-android-processor:$versions.frameworks.dagger\"\n    kapt \"com.google.dagger:dagger-compiler:$versions.frameworks.dagger\"\n\n    implementation project(\":base\")\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- cardlist/build.gradle	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ cardlist/build.gradle	(date 1552588253000)
@@ -30,4 +30,5 @@
     kapt "com.google.dagger:dagger-compiler:$versions.frameworks.dagger"
 
     implementation project(":base")
+    api project(":carddata")
 }
Index: infrastructure/src/main/java/com/cardemory/infrastructure/BaseInteractor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/src/main/java/com/cardemory/infrastructure/BaseInteractor.kt	(date 1552588423000)
+++ infrastructure/src/main/java/com/cardemory/infrastructure/BaseInteractor.kt	(date 1552588423000)
@@ -0,0 +1,6 @@
+package com.cardemory.infrastructure
+
+abstract class BaseInteractor<out Type, in Params> where Type : Any {
+
+    class None
+}
\ No newline at end of file
Index: infrastructure/src/main/java/com/cardemory/infrastructure/BaseBlockingInteractor.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/src/main/java/com/cardemory/infrastructure/BaseBlockingInteractor.kt	(date 1552588423000)
+++ infrastructure/src/main/java/com/cardemory/infrastructure/BaseBlockingInteractor.kt	(date 1552588423000)
@@ -0,0 +1,12 @@
+package com.cardemory.infrastructure
+
+import com.cardemory.infrastructure.entity.Either
+import com.cardemory.infrastructure.entity.Failure
+
+abstract class BaseBlockingInteractor<out Type, in Params>
+    : BaseInteractor<Type, Params>() where Type : Any {
+
+    operator fun invoke(params: Params) = run(params)
+
+    abstract fun run(params: Params): Either<Failure, Type>
+}
\ No newline at end of file
Index: carddata/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- carddata/src/main/res/values/strings.xml	(date 1552579757000)
+++ carddata/src/main/res/values/strings.xml	(date 1552579757000)
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">CardData</string>
+</resources>
Index: infrastructure/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/src/main/res/values/strings.xml	(date 1552579832000)
+++ infrastructure/src/main/res/values/strings.xml	(date 1552579832000)
@@ -0,0 +1,3 @@
+<resources>
+    <string name="app_name">Infrastructure</string>
+</resources>
Index: base/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply from: '../versions.gradle'\n\napply plugin: 'com.android.library'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-android'\n\nandroid {\n    compileSdkVersion versions.android.compileSdk\n    defaultConfig {\n        minSdkVersion versions.android.minSdk\n        targetSdkVersion versions.android.targetSdk\n        versionCode versions.application.versionCode\n        versionName versions.application.versionName\n    }\n\n    buildTypes {\n        debug {\n            minifyEnabled false\n        }\n        release {\n            minifyEnabled true\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n\n}\n\nandroidExtensions {\n    experimental = true\n}\n\ndependencies {\n    /* android */\n    api \"com.android.support:appcompat-v7:$versions.androidx.appcompat\"\n\n    /* kotlin */\n    api \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\n    api \"org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.frameworks.coroutines\"\n\n    /* log */\n    api \"com.jakewharton.timber:timber:$versions.utils.timber\"\n\n    /* dagger */\n    api \"com.google.dagger:dagger:$versions.frameworks.dagger\"\n    api \"com.google.dagger:dagger-android:$versions.frameworks.dagger\"\n    api \"com.google.dagger:dagger-android-support:$versions.frameworks.dagger\"\n\n    /* navigation */\n    api \"ru.terrakok.cicerone:cicerone:$versions.navigation.cicerone\"\n}\nrepositories {\n    mavenCentral()\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- base/build.gradle	(revision 806466ab78eb816f610850fcf3ea5268a63e801a)
+++ base/build.gradle	(date 1552583839000)
@@ -47,6 +47,8 @@
 
     /* navigation */
     api "ru.terrakok.cicerone:cicerone:$versions.navigation.cicerone"
+
+    api project(":infrastructure")
 }
 repositories {
     mavenCentral()
Index: infrastructure/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/src/main/AndroidManifest.xml	(date 1552588422000)
+++ infrastructure/src/main/AndroidManifest.xml	(date 1552588422000)
@@ -0,0 +1,1 @@
+<manifest package="com.cardemory.infrastructure"/>
Index: infrastructure/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- infrastructure/build.gradle	(date 1552588338000)
+++ infrastructure/build.gradle	(date 1552588338000)
@@ -0,0 +1,36 @@
+apply from: '../versions.gradle'
+
+apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
+apply plugin: 'kotlin-android-extensions'
+
+android {
+    compileSdkVersion versions.android.compileSdk
+    defaultConfig {
+        minSdkVersion versions.android.minSdk
+        targetSdkVersion versions.android.targetSdk
+        versionCode versions.application.versionCode
+        versionName versions.application.versionName
+    }
+
+    buildTypes {
+        debug {
+            minifyEnabled false
+        }
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+    }
+
+}
+
+androidExtensions {
+    experimental = true
+}
+
+dependencies {
+
+    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
+    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.frameworks.coroutines"
+}
